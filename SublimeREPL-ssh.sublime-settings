{
    // default_extend_env are used to augment any environment variables
    // that should be visible for all subprocess repls launched within
    // SublimeREPL. This is a very good place to add PATH extension
    // once "PATH": "{PATH}:/home/username/mylocalinstalls/bin" or whatever.
    // Add "REPL_USE_RAILS_BUNDLER": true" to use bundler in pry rails console
    "default_extend_env": {},

    // Specify whether to move repls to a different Sublime Text group (frame)
    // immediately on opening.
    // Setting this to true will simply move it to the 'next' group from the one
    // that was in focus when it was opened (one down with row layout, one
    // to the right with column and grid layout). 
    // Alternatively, you can set this to the index of the group in
    // which you want all repls to be opened (index 0 being the top-left group).
    // NOTE: Activating this option will NOT automatically change your layout or create
    // a new group if it isn't open.
    "open_repl_in_group": true,

    // Persistent history is stored per REPL external_id, it means that all python
    // REPLS will share history. If you wish, you can disable history altogether.
    "persistent_history_enabled": true,

    // By default SublimeREPL leaves REPL view open once the underlying subprocess
    // dies or closes connection. This is useful when the process dies for an unexpected
    // reason as it allows you to inspect it output. Setting this to true 
    // will cause SublimeREPL to close the REPL view once the process dies.
    "view_auto_close": false,

    // On POSIX system Sublime Text launched from GUI does not inherit
    // a proper environment, which often leads to problems with finding interpreters
    // or not using the ones affected by changes in ~/.profile / *rc files.
    // This command is used as a workaround, it's launched before any subprocess
    // REPL starts and its output is parsed as an environment.
    "getenv_command": ["/bin/bash", "--login", "-c", "env"],

    // Some terminals output ASCII color codes which are not currently supported.
    // Enable this option to filter them out.
    "filter_ascii_color_codes": true,

    // Where to look for python virtualenvs.
    "python_virtualenv_paths": [
        "~/.virtualenvs",  // virtualenvwrapper
        "~/.venv"  // venv.bash https://github.com/wuub/venv
    ],

    // Use arrows for history navigation instead of Alt+[P|N]/Ctrl+[P|N]
    "history_arrows": true,

    // Standard Sublime view settings that will be overwritten on each repl view.
    // This has to be customized as a whole dictionary.
    "repl_view_settings": {
        "translate_tabs_to_spaces": false,
        "auto_indent": false,
        "smart_indent": false,
        "spell_check": false,
        "indent_subsequent_lines": false,
        "detect_indentation": false,
        "auto_complete": true,
        "line_numbers": false,
        "gutter": false
    },

    // This setting exposes additional variables in REPL config files, especially
    // those related to Sublime projects that are not available through standard API.
    // WARNING: this will switch your build system back to Automatic each time a REPL
    // is started so beware!
    "use_build_system_hack": false,

    // IP address used to setup autocomplete server in SublimeREPL.
    // Changing this is useful when you want to exclude an address
    // from proxychains/tsocks routing
    "autocomplete_server_ip": "127.0.0.1",

    // Mapping is used when external_id of REPL does not match
    // source.[xxx] scope of syntax definition used to highlight
    // files from which text is being transferred.
    // For example, octave repls use source.matlab syntax files and without 
    // this mapping text transfer will not work.
    "external_id_mapping": {
        "octave": "matlab"
    },

    // If set to true, SublimeREPL will try to append evaluated code to REPL
    // output before evaluation (e.g. Ctrl+, f).
    "show_transferred_text": false,

    // If set to true, REPL view (tab) that receives text for evaluation will
    // be brought to front after text transfer.
    // NOTE: This will not fire if REPL view is in the same tab group as 
    // the view from which the code is sent.
    "focus_view_on_transfer": true,

    // Define additional arguments for python interpreter in order to access
    // custom shells (eg django shell). Custom shells can be run from
    // "Python - Custom shell" menu option.
    // Config keys represent shell names, values represent arguments and
    // can be either of str or list type. The first argument is always
    // treated as python file and is joined with root directory of the
    // selected virtualenv. For example, this is how you can setup django shell:
    // "custom_python_shells": {"django": "my_django_project/manage.py shell"}
    "custom_python_shells": {},

    // For subprocess & ssh repls, ansi codes are stripped from the output and ignored.
    // This setting will enable interpretting ansi control sequences like
    // carriage return, line clear and cursor moving (limited support!)
    "emulate_ansi_csi": false,

    // If emulate ansi csi, limit the cursor being moved up more than 24 lines on screen
    "ansi_limit_cursor_up": false,

    // If using windows and set to true, repl will use paramiko for ssh
    // if dependancies are able to be set up correctly.
    // Else subprocess repl will be used.
    "use_paramiko": true,

    // If using windows and use_paramiko is true and depenancies are setup correctly.
    // allow editing file on server from within sublime by intercepting when you type
    // "vi ./folder/file_to_edit.txt", instead it will download file_to_edit.txt and open in new tab.
    // then on save, file_to_edit.txt is uploaded to server.
    "paramiko_intercept_vi": false,

    // log the input text sent via ssh
    "log_input": false,

    // false: all input logs are stored in 1 file.
    // true: input logs are split according to server name or ip address if no name
    "separate_logs_per_server": false
}
